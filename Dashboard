{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import dash\n",
    "import dash_html_components as html\n",
    "import dash_core_components as dcc\n",
    "from dash.dependencies import Input, Output\n",
    "import plotly.express as px\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Read the airline data into pandas dataframe\n",
    "spacex_df = pd.read_csv(\"spacex_launch_dash.csv\")\n",
    "max_payload = spacex_df['Payload Mass (kg)'].max()\n",
    "min_payload = spacex_df['Payload Mass (kg)'].min()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "app = dash.Dash(__name__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create an app layout\n",
    "app.layout = html.Div(children=[html.H1('SpaceX Launch Records Dashboard',\n",
    "                                        style={'textAlign': 'center', 'color': '#503D36',\n",
    "                                               'font-size': 40}),\n",
    "                                # TASK 1: Add a dropdown list to enable Launch Site selection\n",
    "                                # The default select value is for ALL sites\n",
    "                                # dcc.Dropdown(id='site-dropdown',...)\n",
    "                                html.Br(),\n",
    "                                html.Div(dcc.Dropdown(id='site-dropdown',\n",
    "                                                    options=[\n",
    "                                                        {'label': 'All Sites', 'value': 'ALL'},\n",
    "                                                        {'label': 'CCAFS LC-40', 'value': 'CCAFS LC-40'},\n",
    "                                                        {'label': 'VAFB SLC-4E', 'value': 'VAFB SLC-4E'},\n",
    "                                                        {'label': 'KSC LC-39A', 'value': 'KSC LC-39A'},\n",
    "                                                        {'label': 'CCAFS SLC-40', 'value': 'CCAFS SLC-40'},\n",
    "                                                    ],\n",
    "                                                    value='ALL',\n",
    "                                                    placeholder=\"Launch Site\",\n",
    "                                                    searchable=True\n",
    "                                                    ),),\n",
    "                                # TASK 2: Add a pie chart to show the total successful launches count for all sites\n",
    "                                # If a specific launch site was selected, show the Success vs. Failed counts for the site\n",
    "                                html.Div(dcc.Graph(id='success-pie-chart')),\n",
    "                                html.Br(),\n",
    "\n",
    "                                html.P(\"Payload range (Kg):\"),\n",
    "                                # TASK 3: Add a slider to select payload range\n",
    "                                #dcc.RangeSlider(id='payload-slider',...)\n",
    "                                dcc.RangeSlider(id='payload-slider',\n",
    "                                                min=0, max=10000, step=1000,\n",
    "                                                marks={0: '0',\n",
    "                                                        100: '100'},\n",
    "                                                value=[0, 10000]),\n",
    "\n",
    "                                # TASK 4: Add a scatter chart to show the correlation between payload and launch success\n",
    "                                html.Div(dcc.Graph(id='success-payload-scatter-chart')),\n",
    "                                ])\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TASK 2:\n",
    "# Add a callback function for `site-dropdown` as input, `success-pie-chart` as output\n",
    "@app.callback(\n",
    "    Output(component_id='success-pie-chart', component_property='figure'),\n",
    "    Input(component_id='site-dropdown', component_property='value')\n",
    ")\n",
    "def update_pie_chart(selected_site):\n",
    "    if selected_site == \"ALL\":\n",
    "        spacex_site = spacex_df.copy()\n",
    "        plot_data = spacex_df.groupby(\"Launch Site\")[\"class\"].mean().reset_index()\n",
    "        fig = px.pie(plot_data, values='class', \n",
    "                        names='Launch Site', \n",
    "                        title='Success Rate for Different Sites')\n",
    "        return fig\n",
    "    else:\n",
    "        spacex_site = spacex_df[spacex_df[\"Launch Site\"] == selected_site].copy()\n",
    "        plot_data = (spacex_site.groupby(\"class\")[\"Launch Site\"].count()/len(spacex_site)).reset_index()\n",
    "        fig = px.pie(plot_data, values='Launch Site', \n",
    "                        names=[\"Percent Success\", \"Percent Failed\"], \n",
    "                        title='Success Ratio for Selected Site')\n",
    "        return fig"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "@app.callback(\n",
    "    Output(component_id='success-payload-scatter-chart', component_property='figure'),\n",
    "    [Input(component_id='site-dropdown', component_property='value'), Input(component_id='payload-slider', component_property='value')])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def update_pie_chart(selected_site, selected_range):\n",
    "    if selected_site == \"ALL\":\n",
    "        plot_data = spacex_df[spacex_df[\"Payload Mass (kg)\"].between(selected_range[0], selected_range[1])].copy()\n",
    "        plot_data = spacex_df.groupby(\"Launch Site\")[\"class\"].mean().reset_index()\n",
    "        fig = px.scatter(plot_data, x=\"Payload Mass (kg)\",\n",
    "                        y=\"class\",\n",
    "                        title='Success by Payload Mass (kg)',\n",
    "                        color=\"Booster Version Category\")\n",
    "        return fig\n",
    "    else:\n",
    "        plot_data = spacex_df[(spacex_df[\"Launch Site\"] == selected_site) &\n",
    "                                spacex_df[\"Payload Mass (kg)\"].between(selected_range[0], selected_range[1])].copy()\n",
    "\n",
    "        fig = px.scatter(plot_data, x=\"Payload Mass (kg)\", \n",
    "                        y=\"class\",\n",
    "                        title='Success by Payload Mass (kg)',\n",
    "                        color=\"Booster Version Category\")\n",
    "        return fig"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "if __name__ == '__main__':\n",
    "    app.run_server(debug=True)"
   ]
  }
 ],
 "metadata": {
  "language_info": {
   "name": "python"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
